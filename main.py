import os
import logging
import sqlite3
import random
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = "8419033501:AAECCXZBqUeHTBs-EvF7dr5bm-mt2Cd6vQQ"

# –¢–≤–æ–π ID –∞–¥–º–∏–Ω–∞
ADMIN_IDS = [7871625571]

# –ü–∞–∫–µ—Ç—ã Telegram Stars
STAR_PACKAGES = {
    "50": {"stars": 50, "price": 79},
    "100": {"stars": 100, "price": 156},
    "200": {"stars": 200, "price": 311},
    "300": {"stars": 300, "price": 465},
    "400": {"stars": 400, "price": 620},
    "500": {"stars": 500, "price": 775},
    "600": {"stars": 600, "price": 930},
    "700": {"stars": 700, "price": 1085}
}

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–æ–≤
BANK_DETAILS = {
    "sber": {
        "name": "–°–±–µ—Ä–±–∞–Ω–∫",
        "card_number": "2202 2082 1248 1809",
        "recipient": "–ê–†–¢–Å–ú –†",
        "color": "üü¢",
        "description": "–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã"
    },
    "tinkoff": {
        "name": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", 
        "card_number": "5536 9140 0907 1360",
        "recipient": "–ê–†–¢–Å–ú –†",
        "color": "üü°",
        "description": "–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã"
    }
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
def generate_order_id():
    return random.randint(100000, 999999)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('stars.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_number INTEGER UNIQUE,
            user_id INTEGER,
            user_name TEXT,
            user_username TEXT,
            package TEXT,
            stars INTEGER,
            price INTEGER,
            bank_selected TEXT,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_admin(context, order_data):
    order_number = order_data['order_number']
    user_name = order_data['user_name']
    user_username = order_data['user_username']
    stars = order_data['stars']
    price = order_data['price']
    user_id = order_data['user_id']
    bank = order_data['bank']
    
    bank_info = BANK_DETAILS.get(bank, BANK_DETAILS["sber"])
    
    message = (
        f"üéâ **–ù–û–í–´–ô –ó–ê–ö–ê–ó!**\n\n"
        f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{order_number}`\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
        f"üì± Username: @{user_username if user_username else '–Ω–µ—Ç'}\n"
        f"üÜî ID: `{user_id}`\n"
        f"‚≠ê Stars: {stars}\n"
        f"üíµ –°—É–º–º–∞: {price} —Ä—É–±\n"
        f"üè¶ –ë–∞–Ω–∫: {bank_info['name']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
        f"üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n"
        f"–ë–∞–Ω–∫: {bank_info['name']}\n"
        f"–ö–∞—Ä—Ç–∞: `{bank_info['card_number']}`\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {bank_info['recipient']}\n"
        f"–°—É–º–º–∞: {price} —Ä—É–±\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{order_number}`"
    )
    
    for admin_id in ADMIN_IDS:
        try:
            keyboard = [
                [InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                admin_id,
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å Stars", callback_data="buy_stars")],
        [InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Telegram Stars! üåü\n\n"
        f"‚úÖ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –í–´–î–ê–ß–ê**\n"
        f"‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã (–°–±–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–∫–µ—Ç—ã Stars
async def show_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = []
    for package_id, package in STAR_PACKAGES.items():
        button = InlineKeyboardButton(
            f"{package['stars']} Stars - {package['price']} —Ä—É–±",
            callback_data=f"package_{package_id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç Stars:\n\nüí° *Stars –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –í—ã–±–æ—Ä –±–∞–Ω–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
async def select_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    package_id = query.data.replace("package_", "")
    context.user_data['selected_package'] = package_id
    
    keyboard = [
        [InlineKeyboardButton(f"üü¢ –°–±–µ—Ä–±–∞–Ω–∫", callback_data=f"bank_sber_{package_id}")],
        [InlineKeyboardButton(f"üü° –¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data=f"bank_tinkoff_{package_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º", callback_data="buy_stars")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üè¶ **–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n"
        "–û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞
async def create_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data_parts = query.data.split('_')
    bank = data_parts[1]  # sber, tinkoff
    package_id = data_parts[2]
    
    package = STAR_PACKAGES[package_id]
    user_id = query.from_user.id
    user_name = query.from_user.first_name
    user_username = query.from_user.username
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_number = generate_order_id()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
    conn = sqlite3.connect('stars.db')
    cursor = conn.cursor()
    try:
        cursor.execute(
            'INSERT INTO orders (order_number, user_id, user_name, user_username, package, stars, price, bank_selected) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            (order_number, user_id, user_name, user_username, package_id, package['stars'], package['price'], bank)
        )
        conn.commit()
    except sqlite3.IntegrityError:
        order_number = generate_order_id()
        cursor.execute(
            'INSERT INTO orders (order_number, user_id, user_name, user_username, package, stars, price, bank_selected) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            (order_number, user_id, user_name, user_username, package_id, package['stars'], package['price'], bank)
        )
        conn.commit()
    finally:
        conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    order_data = {
        'order_number': order_number,
        'user_id': user_id,
        'user_name': user_name,
        'user_username': user_username,
        'stars': package['stars'],
        'price': package['price'],
        'bank': bank
    }
    
    await notify_admin(context, order_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bank_info = BANK_DETAILS[bank]
    
    message = (
        f"üì¶ **–í–∞—à –∑–∞–∫–∞–∑ #{order_number}**\n\n"
        f"‚≠ê –ü–∞–∫–µ—Ç: {package['stars']} Stars\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {package['price']} —Ä—É–±\n"
        f"üè¶ –ë–∞–Ω–∫: {bank_info['name']}\n\n"
        f"üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã:**\n"
        f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã'\n"
        f"3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{bank_info['card_number']}`\n"
        f"4. –°—É–º–º–∞: `{package['price']}` —Ä—É–±\n"
        f"5. **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{order_number}`**\n\n"
        f"üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {bank_info['recipient']}\n\n"
        f"üîî **–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:**\n"
        f"‚úÖ *Stars –ø—Ä–∏–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç*\n"
        f"‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—à–∏—Ç–µ @M1rnes\n\n"
        f"üí° *–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {order_number}*"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –ú–æ–∏ –∑–∞–∫–∞–∑—ã
async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    conn = sqlite3.connect('stars.db')
    cursor = conn.cursor()
    cursor.execute('SELECT order_number, stars, price, status, bank_selected, created_at FROM orders WHERE user_id = ? ORDER BY created_at DESC LIMIT 10', (user_id,))
    orders = cursor.fetchall()
    conn.close()
    
    if not orders:
        await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    orders_text = "üìä **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:**\n\n"
    for order in orders:
        order_number, stars, price, status, bank, created_at = order
        bank_info = BANK_DETAILS.get(bank, {"name": "–ù–µ —É–∫–∞–∑–∞–Ω", "color": "‚ö´"})
        
        if status == 'completed':
            status_icon = "‚úÖ"
            status_text = "–í—ã–ø–æ–ª–Ω–µ–Ω"
        elif status == 'cancelled':
            status_icon = "‚ùå"
            status_text = "–û—Ç–º–µ–Ω–µ–Ω"
        else:
            status_icon = "‚è≥"
            status_text = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
        
        orders_text += f"{status_icon} –ó–∞–∫–∞–∑ #{order_number}\n"
        orders_text += f"‚≠ê {stars} Stars - {price} —Ä—É–±\n"
        orders_text += f"üè¶ –ë–∞–Ω–∫: {bank_info['name']}\n"
        orders_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
        orders_text += f"üìÖ {created_at[:16]}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(orders_text, reply_markup=reply_markup, parse_mode='Markdown')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å Stars", callback_data="buy_stars")],
        [InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Telegram Stars! üåü\n\n"
        f"‚úÖ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –í–´–î–ê–ß–ê**\n"
        f"‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã (–°–±–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    banks_list = "\n".join([f"‚Ä¢ {bank['color']} {bank['name']} - {bank['description']}" for bank in BANK_DETAILS.values()])
    
    help_text = (
        f"‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**\n\n"
        f"‚≠ê **–ö–∞–∫ –∫—É–ø–∏—Ç—å Stars:**\n"
        f"1. –ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å Stars'\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç\n"
        f"3. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        f"4. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã\n"
        f"5. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n"
        f"6. –ü–æ–ª—É—á–∏—Ç–µ Stars\n\n"
        f"üîî **–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:**\n"
        f"‚Ä¢ Stars –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
        f"‚Ä¢ –û–∂–∏–¥–∞–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç—ã\n\n"
        f"üè¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–Ω–∫–∏:**\n"
        f"{banks_list}\n\n"
        f"‚ùì **–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π?**\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ @M1rnes"
    )
    
    await query.edit_message_text(help_text, parse_mode='Markdown')

# üîê –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´

# –ö–æ–º–∞–Ω–¥–∞ /admin - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="admin_complete")],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="admin_cancel")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîê **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = sqlite3.connect('stars.db')
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('SELECT COUNT(*) FROM orders')
    total_orders = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM orders WHERE status = "completed"')
    completed_orders = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM orders WHERE status = "pending"')
    pending_orders = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM orders WHERE status = "cancelled"')
    cancelled_orders = cursor.fetchone()[0]
    
    cursor.execute('SELECT SUM(price) FROM orders WHERE status = "completed"')
    total_revenue = cursor.fetchone()[0] or 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM orders')
    unique_users = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞**\n\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_orders}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {pending_orders}\n"
        f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_orders}\n"
        f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
        f"üëë –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
async def admin_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = sqlite3.connect('stars.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT order_number, user_name, user_username, stars, price, status, bank_selected, created_at 
        FROM orders 
        ORDER BY created_at DESC 
        LIMIT 20
    ''')
    orders = cursor.fetchall()
    conn.close()
    
    if not orders:
        await query.edit_message_text("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    orders_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–∫–∞–∑–æ–≤:**\n\n"
    
    for order in orders:
        order_number, user_name, username, stars, price, status, bank, created_at = order
        
        status_icons = {
            'completed': '‚úÖ',
            'cancelled': '‚ùå', 
            'pending': '‚è≥'
        }
        
        bank_name = BANK_DETAILS.get(bank, {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω')
        
        orders_text += (
            f"{status_icons.get(status, '‚ö™')} –ó–∞–∫–∞–∑ #{order_number}\n"
            f"üë§ {user_name} (@{username if username else '–Ω–µ—Ç'})\n"
            f"‚≠ê {stars} Stars - {price} —Ä—É–±\n"
            f"üè¶ {bank_name}\n"
            f"üìä {status} | {created_at[:16]}\n\n"
        )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(orders_text, reply_markup=reply_markup)

# –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑
async def admin_complete_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['admin_action'] = 'complete'
    
    await query.edit_message_text(
        "‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        parse_mode='Markdown'
    )

# –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑  
async def admin_cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['admin_action'] = 'cancel'
    
    await query.edit_message_text(
        "üö´ **–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
async def admin_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
    if text.isdigit():
        order_number = int(text)
        action = context.user_data.get('admin_action')
        
        conn = sqlite3.connect('stars.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        cursor.execute('SELECT user_id, status, stars, user_name FROM orders WHERE order_number = ?', (order_number,))
        order = cursor.fetchone()
        
        if not order:
            await update.message.reply_text(f"‚ùå –ó–∞–∫–∞–∑ #{order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id, current_status, stars, user_name = order

        if action == 'complete':
            if current_status == 'completed':
                await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_number} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute('UPDATE orders SET status = "completed" WHERE order_number = ?', (order_number,))
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    user_id,
                    f"üéâ **–í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                    f"–ó–∞–∫–∞–∑ #{order_number} –Ω–∞ {stars} Stars –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
                    f"Stars –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç.\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! ‚ù§Ô∏è"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_number} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            
        elif action == 'cancel':
            if current_status == 'cancelled':
                await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_number} —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute('UPDATE orders SET status = "cancelled" WHERE order_number = ?', (order_number,))
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    user_id,
                    f"‚ùå **–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
                    f"–ó–∞–∫–∞–∑ #{order_number} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    f"–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.\n\n"
                    f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @M1rnes"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            await update.message.reply_text(f"üö´ –ó–∞–∫–∞–∑ #{order_number} –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        
        conn.close()
        context.user_data.pop('admin_action', None)
    else:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")

# –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="admin_complete")],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="admin_cancel")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîê **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))  # üîê –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞!
    application.add_handler(CallbackQueryHandler(show_packages, pattern="^buy_stars$"))
    application.add_handler(CallbackQueryHandler(select_bank, pattern="^package_"))
    application.add_handler(CallbackQueryHandler(create_order, pattern="^bank_"))
    application.add_handler(CallbackQueryHandler(my_orders, pattern="^my_orders$"))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    
    # üîê –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(admin_orders, pattern="^admin_orders$"))
    application.add_handler(CallbackQueryHandler(admin_complete_order, pattern="^admin_complete$"))
    application.add_handler(CallbackQueryHandler(admin_cancel_order, pattern="^admin_cancel$"))
    application.add_handler(CallbackQueryHandler(admin_back, pattern="^admin_back$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, admin_text_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
